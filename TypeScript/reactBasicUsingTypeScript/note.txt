// Basic type
number // not Number->Number class
string
boolean 
null and undefined we dont normally used to assign type

Example:
let value:number = 4
let str:string = "n"
let isValid = true


// Complex type 
array
object

Example:
let name = ["ab","qw"]
let name : string[];
//assgining object
let person : {   // not =
    name:string;
    age:number;
}


person = {
    name :"Max",
    age:45
}

person ={
    name:7 //will give error
}
//--------------------------------------
// Type inference

const val = "string"


val = 32 // will give error through we didn't menetioned the type that is because
// typescript using type inference will take the type of the varible as the initial assigned value

//--------------------------------------
// Union type
const ab string | number = "nom"
ab = 12  //correct


//---------------------------------------
// Type alias

type Person = {
    name : string,
    value : number
}
let person : Person

person = {
    name :"nmka",
    value:4
}


//--------------------------------------
// Function & type
function add(a:number, b:number) : number {
    return a+b
}

function add(a:number, b:number) : number | string | void | any {
    ...
}


void means will not return anything
//------------------------------------------------------------
//Generic

function div<T> (arr:array(T),b:T){
    return [n,...arr]
}

div([[1,2,3],4) //result : [1,2,3,4]
div(["z","x","c"],"v") //[z,x,c,v]




//